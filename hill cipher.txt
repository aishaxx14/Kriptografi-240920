import tkinter as tk
from tkinter import messagebox
import re

def mod_inverse(a, m):
    for i in range(1, m):
        if (a * i) % m == 1:
            return i
    return None

def matrix_mod_inverse(matrix, mod):
    det = (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]) % mod
    inv_det = mod_inverse(det, mod)
    if inv_det is None:
        raise ValueError("Matriks tidak dapat diinvers dalam modulo 26.")

    inv_matrix = [[matrix[1][1] * inv_det % mod, -matrix[0][1] * inv_det % mod],
                   [-matrix[1][0] * inv_det % mod, matrix[0][0] * inv_det % mod]]
    for i in range(2):
        for j in range(2):
            inv_matrix[i][j] = inv_matrix[i][j] % mod
    return inv_matrix

def hill_cipher(text, key_matrix, mode):
    result = ""
    n = len(key_matrix)  # ukuran matriks (n x n)
    mod = 26  # Panjang alfabet (A-Z)
    text = re.sub(r'[^A-Za-z]', '', text.upper())

    if len(text) % n != 0:
        text += "X" * (n - len(text) % n)

    if mode == "decrypt":
        key_matrix = matrix_mod_inverse(key_matrix, mod)

    for i in range(0, len(text), n):
        block = [ord(char) - ord('A') for char in text[i:i + n]]
        encrypted_block = [(sum(key_matrix[j][k] * block[k] for k in range(n)) % mod) for j in range(n)]
        result += ''.join([chr(num + ord('A')) for num in encrypted_block])

    return result

class HillCipherGUI:
    def __init__(self, master):
        self.master = master
        master.title("Hill Cipher")
        master.geometry("400x550")

        tk.Label(master, text="Masukkan kunci (4 angka dipisahkan spasi, contoh: 3 3 2 5):").pack(pady=5)
        self.key_input = tk.Entry(master, width=40)
        self.key_input.pack(pady=5)

        tk.Label(master, text="Masukkan teks (min. 12 karakter):").pack(pady=5)
        self.text_input = tk.Text(master, height=5)
        self.text_input.pack(pady=5)

        self.mode_var = tk.StringVar(value="encrypt")
        tk.Radiobutton(master, text="Enkripsi", variable=self.mode_var, value="encrypt").pack()
        tk.Radiobutton(master, text="Dekripsi", variable=self.mode_var, value="decrypt").pack()

        process_button = tk.Button(master, text="Proses", command=self.process_text)
        process_button.pack(pady=10)

        tk.Label(master, text="Hasil:").pack(pady=5)
        self.result_text = tk.Text(master, height=5)
        self.result_text.pack(pady=5)

    def process_text(self):
        text = self.text_input.get("1.0", tk.END).strip()
        key = self.key_input.get().strip()
        mode = self.mode_var.get()

        if len(text) < 12:
            messagebox.showerror("Error", "Teks harus minimal 12 karakter.")
            return

        try:
            key_matrix = self.parse_key(key)
            result = hill_cipher(text, key_matrix, mode)
            self.result_text.delete("1.0", tk.END)
            self.result_text.insert(tk.END, result)
        except ValueError as e:
            messagebox.showerror("Error", str(e))

    def parse_key(self, key):
        try:
            numbers = list(map(int, key.split()))
            if len(numbers) != 4:
                raise ValueError("Kunci harus terdiri dari 4 angka.")
            return [numbers[:2], numbers[2:]]
        except ValueError:
            raise ValueError("Kunci tidak valid. Masukkan 4 angka dipisahkan spasi.")

root = tk.Tk()
gui = HillCipherGUI(root)
root.mainloop()
